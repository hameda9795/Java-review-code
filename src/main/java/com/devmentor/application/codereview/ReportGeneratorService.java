package com.devmentor.application.codereview;

import com.devmentor.domain.codereview.CodeReview;
import com.devmentor.domain.codereview.FindingCategory;
import com.devmentor.domain.codereview.FindingSeverity;
import com.devmentor.domain.codereview.ReviewFinding;
import lombok.RequiredArgsConstructor;
import lombok.extern.slf4j.Slf4j;
import org.springframework.stereotype.Service;

import java.time.format.DateTimeFormatter;
import java.util.List;
import java.util.Map;
import java.util.stream.Collectors;

/**
 * Service for generating downloadable code review reports in various formats
 */
@Service
@RequiredArgsConstructor
@Slf4j
public class ReportGeneratorService {

    private static final DateTimeFormatter DATE_FORMATTER = DateTimeFormatter.ofPattern("yyyy-MM-dd HH:mm:ss");

    /**
     * Generate a comprehensive Markdown report for a code review
     */
    public String generateMarkdownReport(CodeReview review) {
        log.info("Generating Markdown report for review: {}", review.getId());

        StringBuilder report = new StringBuilder();

        // Header
        report.append("# Code Review Report\n\n");
        report.append("---\n\n");

        // Overview Section
        appendOverviewSection(report, review);

        // Quality Score Section
        if (review.getQualityScore() != null) {
            appendQualityScoreSection(report, review);
        }

        // Statistics Section
        appendStatisticsSection(report, review);

        // Findings Summary
        appendFindingsSummary(report, review);

        // Detailed Findings
        appendDetailedFindings(report, review);

        // Recommendations
        appendRecommendations(report, review);

        // Footer
        report.append("\n---\n\n");
        report.append("*Generated by DevMentor AI - Professional Code Review Platform*\n");
        report.append("*Report Date: ").append(java.time.LocalDateTime.now().format(DATE_FORMATTER)).append("*\n");

        return report.toString();
    }

    /**
     * Generate a CSV report for findings (suitable for Excel/spreadsheet import)
     */
    public String generateCsvReport(CodeReview review) {
        log.info("Generating CSV report for review: {}", review.getId());

        StringBuilder csv = new StringBuilder();

        // CSV Header
        csv.append("Category,Severity,Title,Description,File Path,Line Number,Is Resolved,Impact Score\n");

        // CSV Rows
        for (ReviewFinding finding : review.getFindings()) {
            csv.append(escapeCsv(finding.getCategory().toString())).append(",");
            csv.append(escapeCsv(finding.getSeverity().toString())).append(",");
            csv.append(escapeCsv(finding.getTitle())).append(",");
            csv.append(escapeCsv(finding.getDescription())).append(",");
            csv.append(escapeCsv(finding.getFilePath() != null ? finding.getFilePath() : "N/A")).append(",");
            csv.append(finding.getLineNumber() != null ? finding.getLineNumber() : "").append(",");
            csv.append(finding.getIsResolved() ? "Yes" : "No").append(",");
            csv.append(finding.getImpactScore()).append("\n");
        }

        return csv.toString();
    }

    /**
     * Generate an HTML report for a code review
     */
    public String generateHtmlReport(CodeReview review) {
        log.info("Generating HTML report for review: {}", review.getId());

        StringBuilder html = new StringBuilder();

        html.append("<!DOCTYPE html>\n");
        html.append("<html lang=\"en\">\n");
        html.append("<head>\n");
        html.append("    <meta charset=\"UTF-8\">\n");
        html.append("    <meta name=\"viewport\" content=\"width=device-width, initial-scale=1.0\">\n");
        html.append("    <title>Code Review Report - ").append(escapeHtml(review.getTitle())).append("</title>\n");
        html.append("    <style>\n");
        html.append(getHtmlStyles());
        html.append("    </style>\n");
        html.append("</head>\n");
        html.append("<body>\n");

        // Header
        html.append("    <div class=\"header\">\n");
        html.append("        <h1>Code Review Report</h1>\n");
        html.append("        <p class=\"subtitle\">").append(escapeHtml(review.getTitle())).append("</p>\n");
        html.append("    </div>\n");

        // Overview
        html.append("    <div class=\"container\">\n");
        html.append("        <div class=\"section\">\n");
        html.append("            <h2>Overview</h2>\n");
        html.append("            <table>\n");
        html.append("                <tr><td><strong>Status:</strong></td><td>").append(review.getStatus()).append("</td></tr>\n");
        html.append("                <tr><td><strong>Created:</strong></td><td>").append(review.getCreatedAt().format(DATE_FORMATTER)).append("</td></tr>\n");
        if (review.getCompletedAt() != null) {
            html.append("                <tr><td><strong>Completed:</strong></td><td>").append(review.getCompletedAt().format(DATE_FORMATTER)).append("</td></tr>\n");
        }
        html.append("                <tr><td><strong>Files Analyzed:</strong></td><td>").append(review.getTotalFilesAnalyzed()).append("</td></tr>\n");
        html.append("                <tr><td><strong>Lines Analyzed:</strong></td><td>").append(review.getTotalLinesAnalyzed()).append("</td></tr>\n");
        html.append("                <tr><td><strong>Total Findings:</strong></td><td>").append(review.getFindings().size()).append("</td></tr>\n");
        html.append("            </table>\n");
        html.append("        </div>\n");

        // Quality Score
        if (review.getQualityScore() != null) {
            html.append("        <div class=\"section\">\n");
            html.append("            <h2>Quality Score</h2>\n");
            html.append("            <div class=\"score-grid\">\n");
            html.append("                <div class=\"score-card\"><h3>Overall</h3><div class=\"score\">").append(review.getQualityScore().getOverallScore()).append("</div><div class=\"grade\">").append(review.getQualityScore().getGrade()).append("</div></div>\n");
            html.append("                <div class=\"score-card\"><h3>Security</h3><div class=\"score\">").append(review.getQualityScore().getSecurityScore()).append("</div></div>\n");
            html.append("                <div class=\"score-card\"><h3>Performance</h3><div class=\"score\">").append(review.getQualityScore().getPerformanceScore()).append("</div></div>\n");
            html.append("                <div class=\"score-card\"><h3>Maintainability</h3><div class=\"score\">").append(review.getQualityScore().getMaintainabilityScore()).append("</div></div>\n");
            html.append("                <div class=\"score-card\"><h3>Best Practices</h3><div class=\"score\">").append(review.getQualityScore().getBestPracticesScore()).append("</div></div>\n");
            html.append("            </div>\n");
            html.append("        </div>\n");
        }

        // Findings
        html.append("        <div class=\"section\">\n");
        html.append("            <h2>Findings (").append(review.getFindings().size()).append(")</h2>\n");

        for (ReviewFinding finding : review.getFindings()) {
            html.append("            <div class=\"finding\">\n");
            html.append("                <div class=\"finding-header\">\n");
            html.append("                    <h3>").append(escapeHtml(finding.getTitle())).append("</h3>\n");
            html.append("                    <div>\n");
            html.append("                        <span class=\"badge badge-").append(finding.getSeverity().toString().toLowerCase()).append("\">").append(finding.getSeverity()).append("</span>\n");
            html.append("                        <span class=\"badge\">").append(finding.getCategory()).append("</span>\n");
            if (finding.getIsResolved()) {
                html.append("                        <span class=\"badge badge-resolved\">Resolved</span>\n");
            }
            html.append("                    </div>\n");
            html.append("                </div>\n");
            html.append("                <p>").append(escapeHtml(finding.getDescription())).append("</p>\n");

            if (finding.getFilePath() != null) {
                html.append("                <p class=\"file-path\"><strong>File:</strong> <code>").append(escapeHtml(finding.getFilePath()));
                if (finding.getLineNumber() != null) {
                    html.append(":").append(finding.getLineNumber());
                }
                html.append("</code></p>\n");
            }

            if (finding.getCodeSnippet() != null) {
                html.append("                <div class=\"code-block\"><strong>Code:</strong><pre><code>").append(escapeHtml(finding.getCodeSnippet())).append("</code></pre></div>\n");
            }

            if (finding.getSuggestedFix() != null) {
                html.append("                <div class=\"fix-block\"><strong>Suggested Fix:</strong><pre><code>").append(escapeHtml(finding.getSuggestedFix())).append("</code></pre></div>\n");
            }

            if (finding.getExplanation() != null) {
                html.append("                <div class=\"explanation\"><strong>Why it matters:</strong><p>").append(escapeHtml(finding.getExplanation())).append("</p></div>\n");
            }

            html.append("            </div>\n");
        }

        html.append("        </div>\n");
        html.append("    </div>\n");

        html.append("    <div class=\"footer\">\n");
        html.append("        <p>Generated by DevMentor AI - Professional Code Review Platform</p>\n");
        html.append("        <p>Report Date: ").append(java.time.LocalDateTime.now().format(DATE_FORMATTER)).append("</p>\n");
        html.append("    </div>\n");

        html.append("</body>\n");
        html.append("</html>\n");

        return html.toString();
    }

    private void appendOverviewSection(StringBuilder report, CodeReview review) {
        report.append("## Overview\n\n");
        report.append("**Title:** ").append(review.getTitle()).append("\n\n");
        report.append("**Description:** ").append(review.getDescription() != null ? review.getDescription() : "N/A").append("\n\n");
        report.append("**Status:** ").append(review.getStatus()).append("\n\n");
        report.append("**Reviewer:** ").append(review.getReviewer().getUsername()).append("\n\n");
        report.append("**Created:** ").append(review.getCreatedAt().format(DATE_FORMATTER)).append("\n\n");
        if (review.getCompletedAt() != null) {
            report.append("**Completed:** ").append(review.getCompletedAt().format(DATE_FORMATTER)).append("\n\n");
        }
        report.append("\n");
    }

    private void appendQualityScoreSection(StringBuilder report, CodeReview review) {
        report.append("## Quality Score\n\n");
        report.append("| Metric | Score |\n");
        report.append("|--------|-------|\n");
        report.append("| **Overall** | **").append(review.getQualityScore().getOverallScore()).append("/100** (Grade: **").append(review.getQualityScore().getGrade()).append("**) |\n");
        report.append("| Security | ").append(review.getQualityScore().getSecurityScore()).append("/100 |\n");
        report.append("| Performance | ").append(review.getQualityScore().getPerformanceScore()).append("/100 |\n");
        report.append("| Maintainability | ").append(review.getQualityScore().getMaintainabilityScore()).append("/100 |\n");
        report.append("| Best Practices | ").append(review.getQualityScore().getBestPracticesScore()).append("/100 |\n");
        report.append("| Test Coverage | ").append(review.getQualityScore().getTestCoverageScore()).append("/100 |\n");
        report.append("\n");
    }

    private void appendStatisticsSection(StringBuilder report, CodeReview review) {
        report.append("## Statistics\n\n");
        report.append("- **Files Analyzed:** ").append(review.getTotalFilesAnalyzed()).append("\n");
        report.append("- **Lines of Code:** ").append(review.getTotalLinesAnalyzed()).append("\n");
        report.append("- **Total Findings:** ").append(review.getFindings().size()).append("\n");
        report.append("- **Analysis Duration:** ").append(review.getAnalysisDurationMs()).append(" ms\n");
        if (review.getAiModelUsed() != null) {
            report.append("- **AI Model:** ").append(review.getAiModelUsed()).append("\n");
        }
        report.append("\n");
    }

    private void appendFindingsSummary(StringBuilder report, CodeReview review) {
        Map<FindingSeverity, Long> bySeverity = review.getFindings().stream()
                .collect(Collectors.groupingBy(ReviewFinding::getSeverity, Collectors.counting()));

        Map<FindingCategory, Long> byCategory = review.getFindings().stream()
                .collect(Collectors.groupingBy(ReviewFinding::getCategory, Collectors.counting()));

        long unresolvedCount = review.getFindings().stream()
                .filter(f -> !f.getIsResolved())
                .count();

        report.append("## Findings Summary\n\n");

        report.append("### By Severity\n\n");
        report.append("| Severity | Count |\n");
        report.append("|----------|-------|\n");
        for (FindingSeverity severity : FindingSeverity.values()) {
            long count = bySeverity.getOrDefault(severity, 0L);
            report.append("| ").append(severity).append(" | ").append(count).append(" |\n");
        }
        report.append("\n");

        report.append("### By Category\n\n");
        report.append("| Category | Count |\n");
        report.append("|----------|-------|\n");
        for (FindingCategory category : FindingCategory.values()) {
            long count = byCategory.getOrDefault(category, 0L);
            if (count > 0) {
                report.append("| ").append(category).append(" | ").append(count).append(" |\n");
            }
        }
        report.append("\n");

        report.append("**Unresolved Findings:** ").append(unresolvedCount).append("\n\n");
    }

    private void appendDetailedFindings(StringBuilder report, CodeReview review) {
        report.append("## Detailed Findings\n\n");

        List<ReviewFinding> findings = review.getFindings();
        if (findings.isEmpty()) {
            report.append("No findings detected - great job! Your code is clean and follows best practices.\n\n");
            return;
        }

        for (int i = 0; i < findings.size(); i++) {
            ReviewFinding finding = findings.get(i);

            report.append("### ").append(i + 1).append(". ").append(finding.getTitle()).append("\n\n");

            report.append("**Severity:** `").append(finding.getSeverity()).append("` | ");
            report.append("**Category:** `").append(finding.getCategory()).append("` | ");
            report.append("**Status:** ").append(finding.getIsResolved() ? "✅ Resolved" : "❌ Unresolved").append("\n\n");

            if (finding.getFilePath() != null) {
                report.append("**File:** `").append(finding.getFilePath());
                if (finding.getLineNumber() != null) {
                    report.append(":").append(finding.getLineNumber());
                }
                report.append("`\n\n");
            }

            report.append("**Description:**\n").append(finding.getDescription()).append("\n\n");

            if (finding.getCodeSnippet() != null) {
                report.append("**Code Snippet:**\n\n```\n").append(finding.getCodeSnippet()).append("\n```\n\n");
            }

            if (finding.getSuggestedFix() != null) {
                report.append("**Suggested Fix:**\n\n```\n").append(finding.getSuggestedFix()).append("\n```\n\n");
            }

            if (finding.getExplanation() != null) {
                report.append("**Why This Matters:**\n").append(finding.getExplanation()).append("\n\n");
            }

            if (finding.getResourcesUrl() != null) {
                report.append("**Learn More:** ").append(finding.getResourcesUrl()).append("\n\n");
            }

            report.append("**Impact Score:** ").append(finding.getImpactScore()).append("/10\n\n");

            report.append("---\n\n");
        }
    }

    private void appendRecommendations(StringBuilder report, CodeReview review) {
        long criticalCount = review.getFindings().stream()
                .filter(f -> f.getSeverity() == FindingSeverity.CRITICAL)
                .count();

        long highCount = review.getFindings().stream()
                .filter(f -> f.getSeverity() == FindingSeverity.HIGH)
                .count();

        report.append("## Recommendations\n\n");

        if (criticalCount > 0) {
            report.append("- ⚠️ **Address ").append(criticalCount).append(" CRITICAL issues immediately** - These represent serious security vulnerabilities or critical bugs.\n");
        }

        if (highCount > 0) {
            report.append("- 🔴 **Prioritize ").append(highCount).append(" HIGH priority findings** - These significantly impact code quality and maintainability.\n");
        }

        if (review.getQualityScore() != null) {
            if (review.getQualityScore().getSecurityScore() < 70) {
                report.append("- 🔒 **Improve security practices** - Current score: ").append(review.getQualityScore().getSecurityScore()).append("/100\n");
            }
            if (review.getQualityScore().getPerformanceScore() < 70) {
                report.append("- ⚡ **Optimize performance** - Current score: ").append(review.getQualityScore().getPerformanceScore()).append("/100\n");
            }
            if (review.getQualityScore().getTestCoverageScore() < 70) {
                report.append("- 🧪 **Increase test coverage** - Current score: ").append(review.getQualityScore().getTestCoverageScore()).append("/100\n");
            }
        }

        report.append("\n");
    }

    private String escapeCsv(String value) {
        if (value == null) {
            return "";
        }
        if (value.contains(",") || value.contains("\"") || value.contains("\n")) {
            return "\"" + value.replace("\"", "\"\"") + "\"";
        }
        return value;
    }

    private String escapeHtml(String value) {
        if (value == null) {
            return "";
        }
        return value
                .replace("&", "&amp;")
                .replace("<", "&lt;")
                .replace(">", "&gt;")
                .replace("\"", "&quot;")
                .replace("'", "&#39;");
    }

    private String getHtmlStyles() {
        return """
                body { font-family: -apple-system, BlinkMacSystemFont, 'Segoe UI', Roboto, sans-serif; line-height: 1.6; color: #333; margin: 0; padding: 0; background: #f5f5f5; }
                .header { background: linear-gradient(135deg, #667eea 0%, #764ba2 100%); color: white; padding: 2rem; text-align: center; }
                .header h1 { margin: 0; font-size: 2.5rem; }
                .subtitle { margin: 0.5rem 0 0 0; opacity: 0.9; }
                .container { max-width: 1200px; margin: 2rem auto; padding: 0 1rem; }
                .section { background: white; padding: 2rem; margin-bottom: 2rem; border-radius: 8px; box-shadow: 0 2px 4px rgba(0,0,0,0.1); }
                .section h2 { margin-top: 0; color: #667eea; border-bottom: 2px solid #667eea; padding-bottom: 0.5rem; }
                table { width: 100%; border-collapse: collapse; margin: 1rem 0; }
                table td { padding: 0.5rem; border-bottom: 1px solid #eee; }
                .score-grid { display: grid; grid-template-columns: repeat(auto-fit, minmax(150px, 1fr)); gap: 1rem; margin: 1rem 0; }
                .score-card { background: #f8f9fa; padding: 1rem; border-radius: 8px; text-align: center; }
                .score-card h3 { margin: 0 0 0.5rem 0; font-size: 0.9rem; color: #666; }
                .score { font-size: 2rem; font-weight: bold; color: #667eea; }
                .grade { font-size: 1.5rem; font-weight: bold; color: #764ba2; margin-top: 0.5rem; }
                .finding { background: #f8f9fa; padding: 1.5rem; margin-bottom: 1.5rem; border-radius: 8px; border-left: 4px solid #667eea; }
                .finding-header { display: flex; justify-content: space-between; align-items: start; margin-bottom: 1rem; }
                .finding h3 { margin: 0; color: #333; }
                .badge { display: inline-block; padding: 0.25rem 0.75rem; border-radius: 12px; font-size: 0.75rem; font-weight: bold; margin-left: 0.5rem; background: #e9ecef; color: #495057; }
                .badge-critical { background: #dc3545; color: white; }
                .badge-high { background: #fd7e14; color: white; }
                .badge-medium { background: #ffc107; color: #000; }
                .badge-low { background: #28a745; color: white; }
                .badge-info { background: #17a2b8; color: white; }
                .badge-resolved { background: #28a745; color: white; }
                .file-path { font-size: 0.9rem; color: #666; }
                .code-block, .fix-block { margin: 1rem 0; }
                .code-block pre, .fix-block pre { background: #2d2d2d; color: #f8f8f2; padding: 1rem; border-radius: 4px; overflow-x: auto; }
                .fix-block { border-left: 3px solid #28a745; padding-left: 1rem; }
                .explanation { margin: 1rem 0; padding: 1rem; background: #e7f3ff; border-radius: 4px; }
                .footer { text-align: center; padding: 2rem; color: #666; font-size: 0.9rem; }
                code { background: #f4f4f4; padding: 0.2rem 0.4rem; border-radius: 3px; font-family: 'Courier New', monospace; }
                """;
    }
}
